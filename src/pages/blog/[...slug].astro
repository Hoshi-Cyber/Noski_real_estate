---
import MainLayout from '../../layouts/MainLayout.astro';
import PostLayout from '../../components/blog/PostLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((p) => ({
    // REST param must be a string, not an array
    params: { slug: p.slug },
    props: { entry: p },
  }));
}

const entry = (Astro.props?.entry as CollectionEntry<'blog'> | undefined) ?? null;

// Defensive fallback (shouldnâ€™t run if props are passed correctly)
let resolved = entry;
if (!resolved) {
  const posts = await getCollection('blog');
  const slug = String(Astro.params.slug || '');
  resolved = posts.find((p) => p.slug === slug) ?? null;
}

if (!resolved) {
  throw new Error('Post not found');
}

const { Content, headings } = await resolved.render();

const toc =
  (headings ?? [])
    .filter((h) => h.depth === 2 || h.depth === 3)
    .map((h) => ({ id: h.slug, text: h.text, level: h.depth === 3 ? 3 : 2 }));

const all = await getCollection('blog');
const related = all
  .filter((p) => p.id !== resolved.id && p.data.category === resolved.data.category)
  .slice(0, 4);

const pageTitle = `${resolved.data.title} | Blog | Severino Realty`;
const pageDesc = resolved.data.description ?? '';
---

<MainLayout title={pageTitle} description={pageDesc}>
  <PostLayout entry={resolved} headings={toc} related={related}>
    <Content />
  </PostLayout>
</MainLayout>
