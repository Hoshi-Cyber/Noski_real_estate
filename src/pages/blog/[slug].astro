---
export const prerender = true;

import MainLayout from '@/layouts/MainLayout.astro';
import PostLayout from '@/components/blog/PostLayout.astro';
import Breadcrumb from '@/components/Breadcrumb.astro';
import { getCollection, getEntryBySlug, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  // Only posts whose slug has no category segment
  return posts
    .filter((p) => !p.slug.includes('/'))
    .map((p) => ({ params: { slug: p.slug } }));
}

const { slug = '' } = Astro.params;
let resolved: CollectionEntry<'blog'> | null = await getEntryBySlug('blog', slug);
if (!resolved) {
  const all = await getCollection('blog');
  resolved = all.find((p) => p.slug === slug) ?? null;
}
if (!resolved) return Astro.redirect('/blog');

const { Content, headings } = await resolved.render();
const toc = (headings ?? [])
  .filter((h) => h.depth === 2 || h.depth === 3)
  .map((h) => ({ id: h.slug, text: h.text, level: h.depth === 3 ? 3 : 2 }));

const pageTitle = `${resolved.data.title} | Blog | Severino Realty`;
const pageDesc = resolved.data.excerpt ?? resolved.data.description ?? '';

const breadcrumbTrail = [
  { label: 'Blog', href: '/blog' },
  { label: resolved.data.title }
];

const all = await getCollection('blog');
const related = all
  .filter((p) => p.id !== resolved.id && (p.data.category === resolved.data.category))
  .slice(0, 4);
---

<MainLayout title={pageTitle} description={pageDesc}>
  <PostLayout entry={resolved} headings={toc} related={related}>
    <Breadcrumb segments={breadcrumbTrail} slot="breadcrumb" />
    <Content />
  </PostLayout>
</MainLayout>
