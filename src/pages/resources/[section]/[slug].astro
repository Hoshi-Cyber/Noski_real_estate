---
import MainLayout from '../../../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';
import { resolveResourceImage, buildResourceHref } from '../../../lib/utils/paths';

/** Build all static paths for resources */
export async function getStaticPaths() {
  // Define here so it’s in scope during the build step.
  const normalize = (s = '') => {
    const v = s.toLowerCase().replace(/_/g, '-').trim();
    if (v === 'faq' || v === 'faqs') return 'faqs';
    if (v === 'market' || v === 'reports' || v === 'market-reports') return 'market-reports';
    return 'guides';
  };

  const all = await getCollection('resources');
  return all.map((entry) => ({
    params: {
      section: normalize(entry.data?.section || ''),
      slug: entry.slug,
    },
    props: { entry, all },
  }));
}

/* ---------- render phase (per page) ---------- */

const normalize = (s = '') => {
  const v = s.toLowerCase().replace(/_/g, '-').trim();
  if (v === 'faq' || v === 'faqs') return 'faqs';
  if (v === 'market' || v === 'reports' || v === 'market-reports') return 'market-reports';
  return 'guides';
};

const { entry, all } = Astro.props as { entry: any; all: any[] };
const section = normalize(entry.data?.section || '');

/* Image */
const hero = resolveResourceImage(
  entry.slug,
  entry.data.section,
  entry.data.imagesFolder,
  entry.data.heroImage,
  entry.data.image
);

/* Meta */
const date = entry.data.pubDate
  ? new Date(entry.data.pubDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })
  : '';
const words = (entry.body || '').trim().split(/\s+/).filter(Boolean).length;
const minutes = Math.max(1, Math.round(words / 200));

/* Siblings */
const sameSection = (all || [])
  .filter((e: any) => normalize(e.data?.section || '') === section)
  .sort((a: any, b: any) => {
    const da = a.data?.pubDate ? new Date(a.data.pubDate).getTime() : 0;
    const db = b.data?.pubDate ? new Date(b.data.pubDate).getTime() : 0;
    return db - da || String(a.data?.title).localeCompare(String(b.data?.title));
  });
const idx = sameSection.findIndex((e: any) => e.slug === entry.slug);
const prev = idx > 0 ? sameSection[idx - 1] : null;
const next = idx >= 0 && idx < sameSection.length - 1 ? sameSection[idx + 1] : null;

/* Labels + JSON-LD */
const sectionLabel = section === 'faqs' ? 'FAQs' : section === 'market-reports' ? 'Market Reports' : 'Guides';
const ld = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: entry.data.title,
  description: entry.data.description || '',
  image: hero || undefined,
  datePublished: entry.data.pubDate ? new Date(entry.data.pubDate).toISOString() : undefined,
  about: sectionLabel,
  mainEntityOfPage: { '@type': 'WebPage', '@id': `/resources/${section}/${entry.slug}` },
};

const { Content } = await entry.render();
---

<MainLayout title={entry.data.title} description={entry.data.description}>
  <article class="container py-10 max-w-3xl">
    <nav aria-label="Breadcrumb" class="mb-4 text-sm">
      <ol class="flex items-center gap-2 text-neutral-500">
        <li><a href="/resources" class="hover:underline">Resources</a></li>
        <li aria-hidden="true">/</li>
        <li><a href={`/resources/${section}`} class="hover:underline">{sectionLabel}</a></li>
        <li aria-hidden="true">/</li>
        <li class="text-primary" aria-current="page">{entry.data.title}</li>
      </ol>
    </nav>

    <header class="mb-6">
      <p class="text-xs text-neutral-500 uppercase tracking-wide">{sectionLabel}</p>
      <h1 class="text-3xl font-semibold text-primary mt-1">{entry.data.title}</h1>
      <p class="mt-1 text-sm text-neutral-500">
        {date && <span>{date}</span>}{date && ' · '}{minutes} min read
      </p>
    </header>

    {hero && (
      <img src={hero} alt={entry.data.title} class="w-full rounded-lg mb-6 object-cover" loading="lazy" decoding="async" width="1200" height="640" />
    )}

    <div class="prose prose-emerald max-w-none">
      <Content />
    </div>

    {(prev || next) && (
      <nav class="mt-10 grid grid-cols-1 sm:grid-cols-2 gap-3" aria-label="Pagination">
        {prev ? (
          <a
            href={buildResourceHref({ slug: prev.slug, data: { section: prev.data.section } })}
            class="block rounded-md ring-1 ring-neutral-200 bg-white p-3 hover:bg-neutral-50"
            rel="prev"
          >
            <div class="text-xs text-neutral-500">Previous</div>
            <div class="font-medium text-primary line-clamp-2">{prev.data.title}</div>
          </a>
        ) : <div></div>}
        {next && (
          <a
            href={buildResourceHref({ slug: next.slug, data: { section: next.data.section } })}
            class="block rounded-md ring-1 ring-neutral-200 bg-white p-3 hover:bg-neutral-50 text-right"
            rel="next"
          >
            <div class="text-xs text-neutral-500">Next</div>
            <div class="font-medium text-primary line-clamp-2">{next.data.title}</div>
          </a>
        )}
      </nav>
    )}

    <div class="mt-6">
      <a href={`/resources/${section}`} class="text-[color:var(--color-cta)] text-sm font-medium">← Back to {sectionLabel}</a>
    </div>

    <script type="application/ld+json">{JSON.stringify(ld)}</script>
  </article>
</MainLayout>
