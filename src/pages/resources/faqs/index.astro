---
// src/pages/resources/faqs/index.astro
import { getCollection } from 'astro:content';
import MainLayout from '../../../layouts/MainLayout.astro';
import Breadcrumbs from '../../../components/resources/Breadcrumbs.astro';

const title = 'FAQs | Severino Realty';
const description = 'Quick answers grouped by Buying, Selling, Renting, and Short-Stay.';

/** Detect section: prefer slug prefix, fallback to front-matter */
const isFaqEntry = (e: any) => {
  const slug = (e?.slug || '').toLowerCase();
  const sec  = (e?.data?.section || '').toLowerCase().replace(/_/g, '-').trim();
  return slug.startsWith('faqs/') || sec === 'faqs' || sec === 'faq';
};

const normalizeSubcat = (s = '') => {
  const v = s.toLowerCase().trim();
  if (v.includes('buy')) return 'buying';
  if (v.includes('sell')) return 'selling';
  if (v.includes('rent') || v.includes('landlord')) return 'renting';
  if (v.includes('short')) return 'short-stay';
  return 'other';
};

const all = await getCollection('resources');
const faqs = all
  .filter(isFaqEntry)
  .sort((a, b) => {
    const da = a.data?.pubDate ? new Date(a.data.pubDate).getTime() : 0;
    const db = b.data?.pubDate ? new Date(b.data.pubDate).getTime() : 0;
    return db - da || String(a.data?.title || '').localeCompare(String(b.data?.title || ''));
  });

const grouped = { buying: [], selling: [], renting: [], 'short-stay': [], other: [] } as Record<string, any[]>;
for (const e of faqs) {
  const key = normalizeSubcat(e.data?.subcategory || e.data?.category || '');
  (grouped[key] || grouped.other).push(e);
}

const order: Array<keyof typeof grouped> = ['buying','selling','renting','short-stay','other'];
const labels: Record<string,string> = {
  buying:'Buying FAQs', selling:'Selling FAQs', renting:'Renting FAQs', 'short-stay':'Short-Stay FAQs', other:'General FAQs'
};

/** Always render the 4 main tiles */
const tiles = [
  { key: 'buying',     name: 'Buying FAQs',     short: 'buying',     href: '/resources/faqs/buying',     desc: 'Short answers about the buying process.' },
  { key: 'selling',    name: 'Selling FAQs',    short: 'selling',    href: '/resources/faqs/selling',    desc: 'Quick answers for property sellers.' },
  { key: 'renting',    name: 'Renting FAQs',    short: 'renting',    href: '/resources/faqs/renting',    desc: 'Landlord and tenant common questions.' },
  { key: 'short-stay', name: 'Short-Stay FAQs', short: 'short-stay', href: '/resources/faqs/short-stay', desc: 'For hosts and guests in short rentals.' },
];
---

<MainLayout {title} {description}>
  <section class="section container">
    <Breadcrumbs
      items={[
        { label: 'Home', href: '/' },
        { label: 'Resources', href: '/resources' },
        { label: 'FAQs' }
      ]}
      class="mb-6"
    />

    <header class="mb-8 text-center">
      <h1 class="section-title">Frequently Asked Questions</h1>
      <p class="text-neutral-600 mt-2 max-w-2xl mx-auto">
        Quick answers across Buying, Selling, Renting, and Short-Stay.
      </p>
    </header>

    <!-- Category tiles -->
    <div id="faq-tiles" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mt-4">
      {tiles.map((t) => (
        <a
          href={t.href}
          class="category-tile tile-tint tile-hover focus:outline-none focus:ring-2 focus:ring-[color:var(--color-cta)]"
        >
          <div class="tile-title">{t.name}</div>
          <p class="tile-sub">{t.desc}</p>
          <div class="mt-4 flex items-center justify-end">
            <span class="text-cta text-sm font-semibold">Explore</span>
            <svg class="ml-1 w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </div>
        </a>
      ))}
    </div>

    {faqs.length > 0 && (
      <>
        <div class="mt-10 flex gap-2 flex-wrap justify-center">
          {order.filter((k) => grouped[k].length > 0).map((k) => (
            <a href={`#sec-${k}`} class="chip-link">{labels[k]}</a>
          ))}
        </div>

        {order.map((key) =>
          grouped[key].length > 0 && (
            <section id={`sec-${key}`} class="mt-8">
              <h2 class="text-xl font-semibold text-primary mb-4">{labels[key]}</h2>
              <div class="rounded-lg border border-neutral-200 bg-white divide-y divide-neutral-200">
                {grouped[key].map((faq) => (
                  <details class="p-4 group">
                    <summary class="cursor-pointer font-medium text-primary flex items-center justify-between">
                      <span>{faq.data.title}</span>
                      <svg class="ml-3 w-4 h-4 text-neutral-400 transition-transform group-open:rotate-180" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                      </svg>
                    </summary>
                    {faq.data.description && (
                      <p class="mt-2 text-neutral-600">{faq.data.description}</p>
                    )}
                    <a href={`/resources/faqs/${faq.slug}`} class="text-cta text-sm mt-2 inline-flex items-center">
                      Read more
                      <svg class="ml-1 w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                      </svg>
                    </a>
                  </details>
                ))}
              </div>
            </section>
          )
        )}
      </>
    )}
  </section>
</MainLayout>
