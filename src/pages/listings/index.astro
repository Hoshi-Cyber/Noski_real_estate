---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import PropertyCard from '../../components/PropertyCard.astro';

// helpers
const areaOf = (loc = '') => (loc || '').split(',')[0].trim();
const canonType = (t = '') => {
  const v = (t || '').trim().toLowerCase();
  return v === 'studio' || v === 'bedsitter' ? 'studio/bedsitter' : v;
};
const canonAvail = (a = '') => {
  const v = (a || '').toLowerCase().replace(/\s+/g,'-');
  if (v.includes('sale')) return 'for-sale';
  if (v.includes('rent')) return 'for-rent';
  if (v.includes('short')) return 'short-stays';
  return '';
};
const num = (x:any)=> Number(String(x??'').replace(/[^0-9]/g,''))||0;
const cardImg = (e:any) => e?.data?.imagesFolder ? `${e.data.imagesFolder}/1.webp` : '/images/placeholder.webp';

const all = await getCollection('listings');

const allLocations = Array.from(new Set(all.map(e => areaOf(e.data.location)).filter(Boolean))).sort();
const allTypesCanon = Array.from(new Set(all.map(e => canonType(e.data.type)).filter(Boolean))).sort();
---

<MainLayout title="All Listings – Locate Properties Kenya">
  <section class="py-10 max-w-7xl mx-auto px-4">
    <!-- Title + CTAs: stack on mobile, side-by-side on ≥sm -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-6">
      <h1 class="text-2xl sm:text-4xl font-extrabold tracking-tight text-primary leading-none whitespace-nowrap">
        All Listings
      </h1>

      <!-- Compact, single-row, scrollable on small screens -->
      <div class="-mx-1 max-w-full overflow-x-auto scrollbar-hide">
        <div class="flex gap-2 px-1">
          <a href="/for-sale" class="btn-outline cta-fluid shrink-0 whitespace-nowrap">For Sale</a>
          <a href="/for-rent" class="btn-outline cta-fluid shrink-0 whitespace-nowrap">For Rent</a>
          <a href="/short-stays" class="btn-outline cta-fluid shrink-0 whitespace-nowrap">Short Stays</a>
        </div>
      </div>
    </div>

    <!-- Filters: **same structure & IDs**; only styling enhanced -->
    <form id="filters" class="mb-6">
      <div class="flex flex-wrap md:flex-nowrap items-stretch gap-2 surface rounded-lg p-3 md:p-4">
        <!-- Availability -->
        <select id="f-availability" name="availability"
          class="flex-1 min-w-[140px] rounded-md border border-neutral-300 p-2 text-sm bg-white">
          <option value="">All</option>
          <option value="for-sale">For Sale</option>
          <option value="for-rent">For Rent</option>
          <option value="short-stays">Short Stays</option>
        </select>

        <!-- Location -->
        <select id="f-location" name="location"
          class="flex-1 min-w-[160px] rounded-md border border-neutral-300 p-2 text-sm bg-white">
          <option value="">All Locations</option>
          {allLocations.map(loc => <option value={loc.toLowerCase()}>{loc}</option>)}
        </select>

        <!-- Beds -->
        <select id="f-beds" name="beds"
          class="flex-1 min-w-[110px] rounded-md border border-neutral-300 p-2 text-sm bg-white">
          <option value="">Beds</option>
          <option value="1">1</option><option value="2">2</option>
          <option value="3">3</option><option value="4">4</option>
          <option value="5+">5+</option>
        </select>

        <!-- Type -->
        <select id="f-type" name="type"
          class="flex-1 min-w-[170px] rounded-md border border-neutral-300 p-2 text-sm bg-white">
          <option value="">All Property Types</option>
          {allTypesCanon.map(t => (
            <option value={t}>{t==='studio/bedsitter' ? 'Studio/Bedsitter' : t.replace(/\b\w/g,c=>c.toUpperCase())}</option>
          ))}
        </select>

        <!-- Min price -->
        <div class="flex items-center rounded-md border border-neutral-300 overflow-hidden basis-32 md:basis-40 shrink-0 bg-white">
          <span class="px-2 text-xs text-neutral-500">KES</span>
          <input name="minPrice" inputmode="numeric" pattern="[0-9,]*" placeholder="Min" class="w-full p-2 text-sm outline-none"/>
        </div>

        <!-- Max price -->
        <div class="flex items-center rounded-md border border-neutral-300 overflow-hidden basis-32 md:basis-40 shrink-0 bg-white">
          <span class="px-2 text-xs text-neutral-500">KES</span>
          <input name="maxPrice" inputmode="numeric" pattern="[0-9,]*" placeholder="Max" class="w-full p-2 text-sm outline-none"/>
        </div>

        <!-- Clear -->
        <button type="button" id="f-clear"
          class="shrink-0 btn-subtle px-4 py-2 text-sm">
          Clear filters
        </button>
      </div>
    </form>

    <div id="result-count" class="text-sm text-neutral-600 mb-3"></div>

    <ul id="cards" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {all.map((e) => {
        const d = e.data;
        const beds = Number(d.bedrooms) || 0;
        return (
          <li
            data-avail={canonAvail(d.availability)}
            data-loc={areaOf(d.location).toLowerCase()}
            data-type={canonType(d.type)}
            data-beds={beds}
            data-price={num(d.price)}
          >
            <PropertyCard listing={{ ...d, image: cardImg(e) }} slug={e.slug} compact={false} />
          </li>
        );
      })}
    </ul>

    <div id="empty" class="hidden text-center text-neutral-600 mt-8">No listings match your filters.</div>
    <div id="pager" class="mt-8 flex flex-wrap items-center justify-center gap-2"></div>
  </section>

  <script is:inline>
    (function(){
      const $ = s => document.querySelector(s);
      const form = $('#filters');
      const els = {
        avail: $('#f-availability'),
        loc:   $('#f-location'),
        type:  $('#f-type'),
        beds:  $('#f-beds'),
        min:   form.querySelector('[name="minPrice"]'),
        max:   form.querySelector('[name="maxPrice"]'),
        cards: Array.from(document.querySelectorAll('#cards > li')),
        count: $('#result-count'),
        empty: $('#empty'),
        pager: $('#pager'),
        clear: $('#f-clear'),
      };

      const qs = new URLSearchParams(location.search);
      const get = k => qs.get(k) || '';
      const setIf = (el,k)=>{ const v=get(k); if(v) el.value=v; };
      setIf(els.avail,'availability');
      setIf(els.loc,'location'); if(!els.loc.value) setIf(els.loc,'q');
      setIf(els.type,'type'); setIf(els.beds,'beds');
      setIf(els.min,'minPrice'); setIf(els.max,'maxPrice');

      const cleanNum = s => Number(String(s||'').replace(/[^0-9]/g,''))||0;

      function state(){
        return {
          availability: (els.avail.value||''),
          location: (els.loc.value||'').toLowerCase().trim(),
          type: (els.type.value||''),
          beds: (els.beds.value||''),
          min: cleanNum(els.min.value),
          max: cleanNum(els.max.value),
        };
      }

      function syncURL(s){
        const p = new URLSearchParams();
        if (s.availability) p.set('availability', s.availability);
        if (s.location)     p.set('location', s.location);
        if (s.type)         p.set('type', s.type);
        if (s.beds)         p.set('beds', s.beds);
        if (s.min)          p.set('minPrice', String(s.min));
        if (s.max)          p.set('maxPrice', String(s.max));
        history.replaceState(null,'', p.toString()? `${location.pathname}?${p.toString()}`: location.pathname);
      }

      const pageSize = 12;

      function apply(){
        const s = state();
        syncURL(s);

        let vis = [];
        for(const li of els.cards){
          const okAvail = !s.availability || li.dataset.avail === s.availability;
          const okLoc   = !s.location || li.dataset.loc === s.location || (li.dataset.loc||'').includes(s.location);
          const okType  = !s.type || li.dataset.type === s.type;
          const beds    = Number(li.dataset.beds||0);
          const okBeds  = !s.beds || (s.beds==='5+' ? beds>=5 : beds===Number(s.beds));
          const price   = Number(li.dataset.price||0);
          const okMin   = !s.min || price >= s.min;
          const okMax   = !s.max || price <= s.max;

          const show = okAvail && okLoc && okType && okBeds && okMin && okMax;
          li.style.display = show ? '' : 'none';
          if (show) vis.push(li);
        }

        const pages = Math.max(1, Math.ceil(vis.length / pageSize));
        let page = Math.min(Math.max(1, Number(new URLSearchParams(location.hash.slice(1)).get('p')||'1')), pages);
        vis.forEach((li,i)=>{ li.style.display = (i>=(page-1)*pageSize && i<page*pageSize) ? '' : 'none'; });

        els.pager.innerHTML = '';
        for(let i=1;i<=pages;i++){
          const b = document.createElement('button');
          b.className = 'px-3 py-1.5 rounded-md border border-neutral-300 text-sm hover:bg-neutral-50';
          if (i===page) b.className = 'px-3 py-1.5 rounded-md bg-emerald-600 text-white text-sm font-semibold';
          b.textContent = String(i);
          b.onclick = ()=>{ location.hash = `p=${i}`; apply(); };
          els.pager.appendChild(b);
        }

        els.count.textContent = `${vis.length} listing${vis.length===1?'':'s'}`;
        els.empty.classList.toggle('hidden', vis.length>0);
      }

      ['change','input'].forEach(ev=>{
        ['avail','loc','type','beds','min','max'].forEach(k=>{
          els[k].addEventListener(ev, apply);
        });
      });
      els.clear.addEventListener('click', ()=>{
        ['avail','loc','type','beds','min','max'].forEach(k=> els[k].value='');
        location.hash='';
        apply();
      });

      window.addEventListener('hashchange', apply);
      apply();
    })();
  </script>
</MainLayout>
