---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import PropertyCard from '../../components/PropertyCard.astro';
import { parseSearchParams, filterListings } from '../../lib/search';

// helpers (same as before)
const areaOf = (loc = '') => (loc || '').split(',')[0].trim();
const canonType = (t = '') => {
  const v = (t || '').trim().toLowerCase();
  return v === 'studio' || v === 'bedsitter' ? 'studio/bedsitter' : v;
};
const cardImg = (entry: any) => entry?.data?.imagesFolder ? `${entry.data.imagesFolder}/1.webp` : '/images/placeholder.webp';

// If a page is provided via query (?page=2), redirect to /listings/page/2 and keep other filters
const url = new URL(Astro.url);
const qp = parseSearchParams(url);
const goPage = Math.max(1, Number(qp.page || 1));
if (goPage !== 1) {
  url.searchParams.delete('page');
  const qs = url.search ? url.search : '';
  return Astro.redirect(`/listings/page/${goPage}${qs}`, 302);
}

// Build page 1 here so /listings still works and indexes well
const all = await getCollection('listings');
const query = { ...qp, page: 1 };
const filtered = filterListings(all, query);

const PAGE_SIZE = 12;
const totalResults = filtered.length;
const totalPages = Math.max(1, Math.ceil(totalResults / PAGE_SIZE));
const currentPage = 1;
const start = 0;
const pageItems = filtered.slice(start, start + PAGE_SIZE);

// facets
const allLocations = Array.from(new Set(all.map(e => areaOf(e.data.location)).filter(Boolean))).sort();
const allTypesCanon = Array.from(new Set(all.map(e => canonType(e.data.type)).filter(Boolean))).sort();

// pageUrl -> path pages, preserve other filters
function pageUrl(page: number) {
  const u = new URL(Astro.url);
  u.searchParams.delete('page');
  const qs = u.searchParams.toString();
  return `/listings/page/${page}${qs ? `?${qs}` : ''}`;
}

const btn = {
  primary: 'inline-flex items-center rounded-md bg-emerald-600 text-white px-5 py-3 text-sm font-semibold shadow-sm transition hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:ring-offset-2',
  ghost:   'inline-flex items-center rounded-md px-3 py-2 text-sm font-semibold text-emerald-700 hover:bg-emerald-50 focus:outline-none focus:ring-2 focus:ring-emerald-200',
  page:    'px-3 py-1.5 rounded-md border border-neutral-300 text-sm hover:bg-neutral-50',
  pageActive: 'px-3 py-1.5 rounded-md bg-emerald-600 text-white text-sm font-semibold',
};
---

<MainLayout title="All Listings – Severino Realty">
  <section class="py-10 max-w-7xl mx-auto px-4">
    <!-- Header -->
    <div class="flex items-center justify-between mb-6 gap-3">
      <h1 class="text-3xl font-bold text-primary">All Listings</h1>
      <div class="hidden sm:flex gap-2">
        <a href="/for-sale" class={btn.ghost}>For Sale</a>
        <a href="/for-rent" class={btn.ghost}>For Rent</a>
        <a href="/short-stays" class={btn.ghost}>Short Stays</a>
      </div>
    </div>

    <!-- Filters -->
    <form id="filters" method="get" action="/listings" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 mb-6">
      <select id="f-location" name="q" class="w-full rounded-md border border-neutral-300 p-2 text-sm">
        <option value="">All Locations</option>
        {allLocations.map(loc => {
          const val = loc.toLowerCase();
          return <option value={val} selected={query.q === val}>{loc}</option>;
        })}
      </select>

      <!-- Beds: EXACT for 1–4, MIN for 5+ (values match search.ts) -->
      <select id="f-bed" name="beds" class="w-full rounded-md border border-neutral-300 p-2 text-sm">
        <option value="" selected={!query.beds}>Beds</option>
        {['1','2','3','4','5+'].map(v => (
          <option value={v} selected={query.beds === v}>{v}</option>
        ))}
      </select>

      <select id="f-type" name="type" class="w-full rounded-md border border-neutral-300 p-2 text-sm">
        <option value="">All Property Types</option>
        {allTypesCanon.map(t => (
          <option value={t} selected={query.type===t}>
            {t==='studio/bedsitter' ? 'Studio/Bedsitter' : t.replace(/\b\w/g, c => c.toUpperCase())}
          </option>
        ))}
      </select>

      <button type="button" id="f-clear" class="w-full rounded-md border border-neutral-300 p-2 text-sm">Clear filters</button>
    </form>

    <div id="result-count" class="text-sm text-neutral-600 mb-3">
      {totalResults} listing{totalResults !== 1 && 's'}
    </div>

    {totalResults === 0 ? (
      <div id="empty" class="text-center text-neutral-600 mt-8">No listings match your filters.</div>
    ) : (
      <ul id="cards" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {pageItems.map((e) => (
          <li data-loc={areaOf(e.data.location).toLowerCase()} data-beds={Number(e.data.bedrooms)||0} data-type={canonType(e.data.type)}>
            <PropertyCard listing={{ ...e.data, image: cardImg(e) }} slug={e.slug} compact={false} />
          </li>
        ))}
      </ul>
    )}

    {totalPages > 1 && (
      <nav id="pager" class="mt-8 flex flex-wrap items-center justify-center gap-2" aria-label="Pagination">
        <a rel="prev" href={pageUrl(Math.max(1, currentPage-1))} class={btn.page}>Prev</a>
        {Array.from({ length: totalPages }, (_, i) => i + 1).map(p => {
          const isActive = p === currentPage;
          return (
            <a href={pageUrl(p)} class={isActive ? btn.pageActive : btn.page} aria-current={isActive ? 'page' : undefined}>{p}</a>
          );
        })}
        <a rel="next" href={pageUrl(Math.min(totalPages, currentPage+1))} class={btn.page}>Next</a>
      </nav>
    )}
  </section>
</MainLayout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('filters');
    const clearBtn = document.getElementById('f-clear');
    if (form) form.addEventListener('change', () => form.requestSubmit());
    if (clearBtn) clearBtn.addEventListener('click', (e) => { e.preventDefault(); window.location.href = '/listings'; });
  });
</script>
