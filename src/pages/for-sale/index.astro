---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import PropertyCard from '../../components/PropertyCard.astro';

// Load listings and pre-scope to "For Sale"
const all = await getCollection('listings');
const forSale = all.filter((e) => (e.data.availability || '').toLowerCase() === 'for sale');

// Helpers
const areaOf = (loc = '') => (loc || '').split(',')[0].trim();
const canonType = (t = '') => {
  const v = (t || '').trim().toLowerCase();
  return v === 'studio' || v === 'bedsitter' ? 'studio/bedsitter' : v;
};

// Distinct facets (from For Sale set)
const allLocations = Array.from(new Set(forSale.map(e => areaOf(e.data.location)).filter(Boolean))).sort();
const allTypesCanon = Array.from(new Set(forSale.map(e => canonType(e.data.type)).filter(Boolean))).sort();

// Safe image helper (main image = imagesFolder/1.webp)
const cardImg = (entry: any) => {
  const folder = entry?.data?.imagesFolder || '';
  return folder ? `${folder}/1.webp` : '/images/placeholder.webp';
};

// Buttons
const btn = {
  ghost:
    'inline-flex items-center rounded-md px-3 py-2 text-sm font-semibold text-emerald-700 hover:bg-emerald-50 focus:outline-none focus:ring-2 focus:ring-emerald-200'
};
---

<MainLayout
  title="Properties for Sale"
  description="Browse properties currently available for purchase across Nairobi's vibrant neighbourhoods."
>
  <section class="py-12 max-w-7xl mx-auto px-4">
    <div class="flex items-center justify-between gap-3 mb-4">
      <h1 class="text-3xl font-bold text-primary">Homes for Sale in Nairobi</h1>
      <div class="hidden sm:flex gap-2">
        <a href="/listings" class={btn.ghost}>All Listings</a>
        <a href="/for-rent" class={btn.ghost}>For Rent</a>
        <a href="/short-stays" class={btn.ghost}>Short Stays</a>
      </div>
    </div>

    <p class="text-neutral-700 mb-6">
      Explore our collection of properties for sale. Use the filters below to narrow your search by neighbourhood, bedrooms or property type.
    </p>

    <!-- Filters (pre-scoped to For Sale) -->
    <div class="mb-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
      <!-- Location -->
      <select id="f-location" class="w-full rounded-md border border-neutral-300 p-2 text-sm">
        <option value="">All Locations</option>
        {allLocations.map(loc => (<option value={loc.toLowerCase()}>{loc}</option>))}
      </select>

      <!-- Min Bedrooms -->
      <select id="f-bed" class="w-full rounded-md border border-neutral-300 p-2 text-sm">
        <option value="0">Min Bedrooms</option>
        <option value="1">1+</option>
        <option value="2">2+</option>
        <option value="3">3+</option>
        <option value="4">4+</option>
        <option value="5">5+</option>
      </select>

      <!-- Type (canonical) -->
      <select id="f-type" class="w-full rounded-md border border-neutral-300 p-2 text-sm">
        <option value="">All Property Types</option>
        {allTypesCanon.map(t => (
          <option value={t}>
            {t === 'studio/bedsitter' ? 'Studio/Bedsitter' : t.replace(/\b\w/g, c => c.toUpperCase())}
          </option>
        ))}
      </select>

      <!-- Clear -->
      <button id="f-clear" class="w-full rounded-md border border-neutral-300 p-2 text-sm">
        Clear filters
      </button>
    </div>

    <!-- Results header -->
    <div class="flex items-center justify-between mb-3">
      <div id="result-count" class="text-sm text-neutral-600"></div>
    </div>

    <!-- Listing grid (4 per row on large screens) -->
    <ul id="cards" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {forSale.map((e) => {
        const d = e.data;
        const loc = areaOf(d.location).toLowerCase();
        const beds = Number.isFinite(d.bedrooms) ? Number(d.bedrooms) : 0;
        const typeCanon = canonType(d.type);

        return (
          <li
            class="card"
            data-loc={loc}
            data-beds={beds}
            data-type={typeCanon}
          >
            <PropertyCard
              listing={{ ...d, image: cardImg(e) }}
              slug={e.slug}
              compact={false}
            />
          </li>
        );
      })}
    </ul>

    <div id="empty" class="hidden text-center text-neutral-600 mt-8">
      No properties match your filters.
    </div>

    <!-- Pagination -->
    <div id="pager" class="mt-8 flex flex-wrap items-center justify-center gap-2"></div>

    <!-- Bottom shortcuts (mobile) -->
    <div class="sm:hidden mt-8 flex justify-center gap-2">
      <a href="/listings" class={btn.ghost}>All Listings</a>
      <a href="/for-rent" class={btn.ghost}>For Rent</a>
      <a href="/short-stays" class={btn.ghost}>Short Stays</a>
    </div>
  </section>
</MainLayout>

<!-- Reusable pagination+filters -->
<script type="module" is:inline>
  import { initPaginationAndFilters } from '/src/lib/pagination.js';

  initPaginationAndFilters({
    pageSize: 12,
    filterSelectors: {
      location: '#f-location',
      bedrooms: '#f-bed',
      type: '#f-type',
    },
    clearSelector: '#f-clear',
    cardSelector: '#cards .card',
    pagerSelector: '#pager',
    emptySelector: '#empty',
    resultCountSelector: '#result-count',
  });
</script>
