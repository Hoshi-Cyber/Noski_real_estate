---
import type { CollectionEntry } from 'astro:content';

type Props = {
  items: CollectionEntry<'developments'>[];
  title?: string;
  class?: string;
};
const { items = [], title = 'Related Developments', class: cls = '' } = Astro.props as Props;

function hrefFor(d: CollectionEntry<'developments'>['data'], slug: string) {
  const base = d.category === 'new_development' ? '/developments/new/' : '/developments/unfinished/';
  return `${base}${(d.slug ?? slug).replace(/\/+$/,'')}/`;
}
---

{items.length > 0 && (
  <section class={`card-tight ${cls}`}>
    <div class="flex items-center justify-between mb-3">
      <h2 class="section-subtitle">{title}</h2>
      <div class="flex gap-2">
        <button id="rel-prev" class="btn-outline px-2 py-1" aria-label="Scroll left">‹</button>
        <button id="rel-next" class="btn-outline px-2 py-1" aria-label="Scroll right">›</button>
      </div>
    </div>

    <div id="rel-track" class="relative">
      <ul class="flex gap-3 overflow-x-auto snap-x snap-mandatory scroll-p-3 pb-1"
          style="scrollbar-width: thin;">
        {items.map((it) => {
          const d = it.data;
          const link = hrefFor(d, it.slug);
          const img = d.media?.photos?.[0] ?? '/images/placeholders/development.webp';
          const loc = [d.location?.estate, d.location?.city].filter(Boolean).join(', ');
          const title = d.title;
          return (
            <li class="snap-start shrink-0 basis-4/5 sm:basis-1/2 md:basis-1/3 lg:basis-1/4">
              <a href={link} class="block post-card">
                <img
                  src={img}
                  alt={`${title}${loc ? ' — ' + loc : ''}`}
                  width="800" height="533"
                  loading="lazy" decoding="async"
                  class="w-full aspect-[3/2] object-cover"
                />
                <div class="post-body">
                  <div class="post-title text-sm line-clamp-2">{title}</div>
                  {loc && <div class="post-desc">{loc}</div>}
                </div>
              </a>
            </li>
          );
        })}
      </ul>
    </div>
  </section>
)}

<script type="module" client:load>
  const track = document.getElementById('rel-track')?.querySelector('ul') as HTMLUListElement | null;
  const prev = document.getElementById('rel-prev') as HTMLButtonElement | null;
  const next = document.getElementById('rel-next') as HTMLButtonElement | null;

  const step = () => Math.max(320, Math.floor((track?.clientWidth || 800) * 0.8));

  function scrollByDir(dir: number) {
    if (!track) return;
    track.scrollBy({ left: dir * step(), behavior: 'smooth' });
  }

  prev?.addEventListener('click', () => scrollByDir(-1));
  next?.addEventListener('click', () => scrollByDir(1));

  // Keyboard support
  track?.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight') { e.preventDefault(); scrollByDir(1); }
    if (e.key === 'ArrowLeft') { e.preventDefault(); scrollByDir(-1); }
  });
</script>
