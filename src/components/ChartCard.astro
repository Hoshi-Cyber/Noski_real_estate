---
export interface Props {
  points: { x: number; y: number }[];
  caption?: string;
  height?: string; // e.g. "h-48"
}

const { points = [], caption = '', height = 'h-48' } = Astro.props;

function toPath(points) {
  if (!points?.length) return '';
  const xMax = points.length - 1;
  const yVals = points.map(p => p.y);
  const yMin = Math.min(...yVals);
  const yMax = Math.max(...yVals) || 1;

  const norm = points.map((p, i) => ({
    x: (i / xMax) * 100,
    y: (1 - (p.y - yMin) / (yMax - yMin || 1)) * 100,
  }));

  return norm
    .map((p, i) => (i === 0 ? `M ${p.x},${p.y}` : ` L ${p.x},${p.y}`))
    .join('');
}

const pathD = toPath(points);
---

<figure class="rounded-md ring-1 ring-neutral-200 bg-white shadow-sm p-4">
  <svg
    viewBox="0 0 100 100"
    preserveAspectRatio="none"
    class={`w-full ${height} text-primary`}
  >
    <rect x="0" y="0" width="100" height="100" fill="none" />
    <path
      d={pathD}
      fill="none"
      stroke="currentColor"
      stroke-width="1.5"
    />
  </svg>
  {caption && (
    <figcaption class="mt-2 text-xs text-neutral-500">
      {caption}
    </figcaption>
  )}
</figure>
