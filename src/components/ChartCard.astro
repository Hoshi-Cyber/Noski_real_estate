---
export interface Props {
  points?: { x: number; y: number }[];
  caption?: string;
  height?: string;            // for SVG fallback, e.g. "h-48"

  // Optional previews (one of these can be used instead of the SVG)
  previewImg?: string;        // URL to a static image preview
  previewAlt?: string;
  previewWidth?: number;      // intrinsic sizing to reduce CLS
  previewHeight?: number;

  previewIframe?: string;     // URL to an embeddable chart
  iframeTitle?: string;
  iframeWidth?: number;
  iframeHeight?: number;

  // Optional actions
  viewHref?: string;          // “View details”
  downloadHref?: string;      // “Download”
}

const {
  points = [],
  caption = '',
  height = 'h-48',

  previewImg,
  previewAlt = 'Chart preview',
  previewWidth = 640,
  previewHeight = 320,

  previewIframe,
  iframeTitle = 'Embedded chart',
  iframeWidth = 640,
  iframeHeight = 320,

  viewHref,
  downloadHref,
} = Astro.props as Props;

function toPath(pts: {x:number;y:number}[]) {
  if (!pts?.length) return '';
  const xMax = pts.length - 1;
  const ys = pts.map(p => p.y);
  const yMin = Math.min(...ys);
  const yMax = Math.max(...ys) || 1;
  const norm = pts.map((p, i) => ({
    x: (i / xMax) * 100,
    y: (1 - (p.y - yMin) / (yMax - yMin || 1)) * 100,
  }));
  return norm.map((p, i) => (i === 0 ? `M ${p.x},${p.y}` : ` L ${p.x},${p.y}`)).join('');
}

const pathD = toPath(points);
---

<figure class="rounded-xl ring-1 ring-neutral-200 bg-white shadow-sm p-4 transition hover:shadow-md">
  <!-- Preview priority: image -> iframe -> inline SVG -->
  {previewImg ? (
    <img
      src={previewImg}
      alt={previewAlt}
      width={previewWidth}
      height={previewHeight}
      loading="lazy"
      decoding="async"
      class="w-full h-auto rounded-md"
    />
  ) : previewIframe ? (
    <iframe
      src={previewIframe}
      title={iframeTitle}
      width={iframeWidth}
      height={iframeHeight}
      loading="lazy"
      class="w-full rounded-md"
    ></iframe>
  ) : (
    <svg
      viewBox="0 0 100 100"
      preserveAspectRatio="none"
      class={`w-full ${height} text-primary`}
      width="400"
      height="400"
      role="img"
      aria-label={caption || 'Line chart'}
    >
      <rect x="0" y="0" width="100" height="100" fill="none" />
      <path d={pathD} fill="none" stroke="currentColor" stroke-width="1.5" />
    </svg>
  )}

  {caption && (
    <figcaption class="mt-2 text-xs text-neutral-500">
      {caption}
    </figcaption>
  )}

  {(viewHref || downloadHref) && (
    <div class="mt-3 flex flex-wrap gap-2">
      {viewHref && (
        <a href={viewHref} class="btn-outline rounded-md text-sm px-3 py-1.5 focus:outline-none focus:ring-2 focus:ring-[color:var(--color-cta)]">
          View details
        </a>
      )}
      {downloadHref && (
        <a href={downloadHref} class="btn-outline rounded-md text-sm px-3 py-1.5 focus:outline-none focus:ring-2 focus:ring-[color:var(--color-cta)]">
          Download
        </a>
      )}
    </div>
  )}
</figure>
