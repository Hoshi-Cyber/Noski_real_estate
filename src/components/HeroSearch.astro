<form id="hero-search" action="/listings" method="get"
  class="mt-6 rounded-xl border border-neutral-200 bg-white/90 backdrop-blur p-3 sm:p-4 shadow-sm">
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-7 gap-3">
    <!-- Availability -->
    <label class="sr-only" for="hs-avail">Availability</label>
    <select id="hs-avail" name="availability" class="rounded-md border border-neutral-300 p-2 text-sm">
      <option value="">All</option>
      <option value="for-sale">For Sale</option>
      <option value="for-rent">For Rent</option>
      <option value="short-stays">Short Stays</option>
    </select>

    <!-- Location / Keyword -->
    <label class="sr-only" for="hs-location">Location or keyword</label>
    <input id="hs-location" name="location" type="search" inputmode="search" placeholder="e.g. Karen"
      class="rounded-md border border-neutral-300 p-2 text-sm" />

    <!-- Min price -->
    <div class="flex items-center rounded-md border border-neutral-300 overflow-hidden">
      <span class="px-2 text-xs text-neutral-500">KES</span>
      <input name="minPrice" inputmode="numeric" pattern="[0-9,]*" placeholder="Min"
        class="w-full p-2 text-sm outline-none" />
    </div>

    <!-- Max price -->
    <div class="flex items-center rounded-md border border-neutral-300 overflow-hidden">
      <span class="px-2 text-xs text-neutral-500">KES</span>
      <input name="maxPrice" inputmode="numeric" pattern="[0-9,]*" placeholder="Max"
        class="w-full p-2 text-sm outline-none" />
    </div>

    <!-- Property type (rename to ptype to avoid clashing with availability "type") -->
    <label class="sr-only" for="hs-ptype">Property type</label>
    <select id="hs-ptype" name="ptype" class="rounded-md border border-neutral-300 p-2 text-sm">
      <option value="">Any</option>
      <option value="apartment">Apartment</option>
      <option value="bungalow">Bungalow</option>
      <option value="cabin">Cabin</option>
      <option value="cottage">Cottage</option>
      <option value="house">House</option>
      <option value="maisonette">Maisonette</option>
      <option value="studio/bedsitter">Studio/Bedsitter</option>
      <option value="suite">Suite</option>
      <option value="townhouse">Townhouse</option>
      <option value="villa">Villa</option>
      <option value="land">Land</option>
    </select>

    <!-- Beds -->
    <label class="sr-only" for="hs-beds">Beds</label>
    <select id="hs-beds" name="beds" class="rounded-md border border-neutral-300 p-2 text-sm">
      <option value="">Beds</option>
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5+">5+</option>
    </select>

    <!-- Submit -->
    <button type="submit" class="btn-cta inline-flex items-center justify-center gap-2 rounded-md px-4 py-2 text-sm">
      <svg viewBox="0 0 24 24" class="w-4 h-4" aria-hidden="true">
        <path d="M10 4a6 6 0 104.47 10.03l4.25 4.25 1.42-1.42-4.25-4.25A6 6 0 0010 4zm0 2a4 4 0 110 8 4 4 0 010-8z"/>
      </svg>
      Search
    </button>
  </div>
</form>

<script is:inline>
(() => {
  const form = document.getElementById('hero-search');
  const byName = (n) => form.querySelector(`[name="${n}"]`);

  const qs = new URLSearchParams(location.search);
  const get = (k) => qs.get(k) ?? '';

  // Map canonical type -> legacy availability for prefill
  const typeToAvailability = (t) => {
    const s = String(t||'').toLowerCase();
    if (s === 'rent') return 'for-rent';
    if (s === 'sale') return 'for-sale';
    if (s === 'short-stays') return 'short-stays';
    return '';
  };

  // Prefill from URL (support legacy + canonical)
  const prefill = {
    availability: get('availability') || typeToAvailability(get('type')),
    location: get('location') || get('q'),
    minPrice: get('minPrice'),
    maxPrice: get('maxPrice'),
    ptype: get('ptype'),
    beds: get('beds'),
  };
  Object.entries(prefill).forEach(([k, v]) => { if (v) byName(k).value = v; });

  // Ensure a hidden canonical "type" (rent|sale|short-stays) accompanies the legacy availability
  const ensureHiddenType = () => {
    let hid = form.querySelector('input[name="type"][type="hidden"]');
    if (!hid) {
      hid = document.createElement('input');
      hid.type = 'hidden';
      hid.name = 'type';
      form.appendChild(hid);
    }
    return hid;
  };

  const availabilityToType = (v) => {
    const s = String(v||'').toLowerCase();
    if (s.includes('rent')) return 'rent';
    if (s.includes('sale')) return 'sale';
    if (s.includes('short')) return 'short-stays';
    return '';
  };

  // Normalize before submit
  form.addEventListener('submit', () => {
    const stripNum = (s) => (s || '').toString().replace(/[^0-9]/g, '');
    const loc = (byName('location').value || '').trim().toLowerCase();
    byName('location').value = loc;

    byName('minPrice').value = stripNum(byName('minPrice').value);
    byName('maxPrice').value = stripNum(byName('maxPrice').value);

    // canonical type from availability
    const canonicalType = availabilityToType(byName('availability').value);
    const hidType = ensureHiddenType();
    hidType.value = canonicalType;

    // Disable empty fields (but keep hidden type if present)
    Array.from(form.elements).forEach(el => {
      if (el.name && !el.value && !(el.name === 'type' && canonicalType)) el.disabled = true;
    });
  });
})();
</script>
