---
import type { CollectionEntry } from 'astro:content';

interface Props {
  listing: CollectionEntry<'listings'>['data'] | CollectionEntry<'featured'>['data'];
  slug: string;
  href?: string;
  compact?: boolean;
  primaryCtaClass?: string;   // defaults to .btn-cta
  secondaryCtaClass?: string; // available if needed later
  imgProps?: Record<string, any>; // loading/decoding/width/height
}

const {
  listing,
  slug,
  href,
  compact = false,
  primaryCtaClass = 'btn-cta',
  secondaryCtaClass = 'btn-outline',
  imgProps = { loading: 'lazy', decoding: 'async', width: 768, height: 432 }
} = Astro.props as Props;

/* ---------- Helpers ---------- */
const norm = (s: string = '') => s.toLowerCase().replace(/\s+/g, '-');

const finalHref =
  href || `/properties/${norm(String(listing.availability || ''))}/${slug}`;

function resolveCardImage(
  slug: string,
  imagesFolder?: string,
  images?: string[] | undefined,
  image?: string | undefined
): string {
  const base = (imagesFolder ? imagesFolder.replace(/^\/+|\/+$/g, '') : `images/listings/${slug}`);
  const candidates = [
    `/${base}/hero.webp`,
    `/${base}/cover.webp`,
    `/${base}/main.webp`,
    `/${base}/1.webp`,
    ...(Array.isArray(images) ? images : []),
    image,
    '/images/placeholder.webp'
  ].filter(Boolean) as string[];
  return candidates[0];
}

const finalImg = resolveCardImage(
  slug,
  (listing as any).imagesFolder,
  (listing as any).images,
  (listing as any).image
);

/* Responsive srcset */
const srcset = `
  ${finalImg}?w=480 480w,
  ${finalImg}?w=768 768w,
  ${finalImg}?w=1024 1024w
`;

const altText = listing.title && listing.location
  ? `${listing.title} - ${listing.location}`
  : listing.title || 'Property image';

const statusColors: Record<string, string> = {
  'for sale': 'bg-blue-600',
  'for rent': 'bg-emerald-600',
  'short-stays': 'bg-neutral-800',
  'short-stay': 'bg-neutral-800'
};
const availSeg = norm(String(listing.availability || ''));
const statusClass = statusColors[availSeg] || 'bg-neutral-800';

const priceText =
  typeof listing.price === 'number'
    ? `KSh ${listing.price.toLocaleString()}`
    : 'Price N/A';

const imgAspect = compact ? 'aspect-[4/3]' : 'aspect-[16/9]';
const titleSize = compact ? 'text-base' : 'text-lg';
const pad = compact ? 'p-3' : 'p-4';
const btnPad = compact ? 'px-3 py-2' : 'px-4 py-2';
---

<article
  class="card group border border-neutral-200 overflow-hidden bg-white transition will-change-transform
         hover:shadow-md focus-within:ring-2 focus-within:ring-cta"
  role="article"
>
  <!-- Media -->
  <a href={finalHref} class="block overflow-hidden focus:outline-none" aria-label={`Open ${listing.title || 'property'} details`}>
    <figure class={`w-full ${imgAspect} relative`}>
      {listing.availability && (
        <span
          class={`absolute top-2 left-2 ${statusClass} text-white text-[11px] font-medium px-2 py-1 rounded z-10`}
          aria-label={`Status: ${listing.availability}`}
        >
          {listing.availability}
        </span>
      )}
      <img
        src={finalImg}
        srcset={srcset}
        sizes={compact ? "(min-width:1024px) 25vw, (min-width:640px) 50vw, 100vw" : "(min-width:768px) 33vw, 100vw"}
        alt={altText}
        class="absolute inset-0 w-full h-full object-cover transition-transform duration-300 ease-out group-hover:scale-[1.02]"
        {...imgProps}
      />
    </figure>
  </a>

  <!-- Body -->
  <div class={`flex flex-col ${pad} gap-2`}>
    <h3 class={`${titleSize} font-semibold text-primary leading-snug`}>
      <a
        href={finalHref}
        class="rounded focus:outline-none focus:ring-2 focus:ring-cta hover:opacity-90"
      >
        {listing.title || 'Untitled Property'}
      </a>
    </h3>

    <p class="text-sm text-neutral-600">{listing.location || 'Unknown Location'}</p>

    <div class="flex items-baseline justify-between">
      <div class="text-sm text-neutral-700 fact-label">
        {listing.bedrooms ? `${listing.bedrooms} bd` : '— bd'}
        {' • '}
        {listing.bathrooms ? `${listing.bathrooms} ba` : '— ba'}
      </div>
      <div class="text-sm md:text-base font-semibold text-neutral-900">{priceText}</div>
    </div>

    {(listing.bedrooms || listing.bathrooms) && (
      <div class="mt-1 flex flex-wrap gap-2">
        {listing.bedrooms && (
          <span class="pill pill-slate">
            <span class="pill-dot"></span>
            {listing.bedrooms} {listing.bedrooms === 1 ? 'Bedroom' : 'Bedrooms'}
          </span>
        )}
        {listing.bathrooms && (
          <span class="pill pill-emerald">
            <span class="pill-dot"></span>
            {listing.bathrooms} {listing.bathrooms === 1 ? 'Bathroom' : 'Bathrooms'}
          </span>
        )}
      </div>
    )}

    <!-- CTA pinned to bottom for consistency -->
    <div class="mt-3">
      <a
        href={finalHref}
        class={`${primaryCtaClass} ${btnPad} text-sm rounded-md w-full inline-flex`}
        aria-label="View details"
      >
        View details
      </a>
    </div>
  </div>
</article>
