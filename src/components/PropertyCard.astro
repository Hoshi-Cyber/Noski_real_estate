---
import type { CollectionEntry } from 'astro:content';

interface Props {
  listing: CollectionEntry<'listings'>['data'] | CollectionEntry<'featured'>['data'];
  slug: string;
  href?: string;
  compact?: boolean;
  primaryCtaClass?: string;   // defaults to .btn-cta
  secondaryCtaClass?: string; // reserved
  imgProps?: Record<string, any>; // loading/decoding/width/height
}

const {
  listing,
  slug,
  href,
  compact = false,
  primaryCtaClass = 'btn-cta',
  secondaryCtaClass = 'btn-outline',
  imgProps = { loading: 'lazy', decoding: 'async', width: 768, height: 432 }
} = Astro.props as Props;

/* ---------- Helpers ---------- */
function availabilityToSegment(a?: string) {
  const v = (a || '').toLowerCase();
  if (v.includes('rent')) return 'rent';
  if (v.includes('sale')) return 'sale';
  if (v.includes('short')) return 'short-stay';
  return 'sale';
}

const finalHref =
  href || `/properties/${availabilityToSegment((listing as any).availability)}/${slug}`;

/** Ensure a path starts with a single leading slash */
function withLeadingSlash(p?: string) {
  if (!p) return undefined;
  return p.startsWith('/') ? p : `/${p}`;
}

/**
 * Resolve the best image for the card:
 * 1) listing.image (explicit) or listing.heroImage (frontmatter)
 * 2) first of listing.images[]
 * 3) imagesFolder: hero.webp → cover.webp → main.webp → 1.webp
 * 4) placeholder
 */
function resolveCardImage(opts: {
  slug: string,
  imagesFolder?: string,
  images?: string[] | undefined,
  image?: string | undefined,
  heroImage?: string | undefined
}): string {
  const base =
    opts.imagesFolder
      ? opts.imagesFolder.replace(/^\/+|\/+$/g, '')
      : `images/listings/${opts.slug}`;

  const candidates = [
    withLeadingSlash(opts.image),
    withLeadingSlash(opts.heroImage),
    ...(Array.isArray(opts.images) ? opts.images.map(withLeadingSlash) : []),
    `/${base}/hero.webp`,
    `/${base}/cover.webp`,
    `/${base}/main.webp`,
    `/${base}/1.webp`,
    '/images/placeholder.webp'
  ].filter(Boolean) as string[];

  return candidates[0]!;
}

const finalImg = resolveCardImage({
  slug,
  imagesFolder: (listing as any).imagesFolder,
  images: (listing as any).images,
  image: (listing as any).image,
  heroImage: (listing as any).heroImage
});

/* Responsive srcset (works with versioned URLs like ?v=v2) */
const qsep = finalImg.includes('?') ? '&' : '?';
const srcset = `
  ${finalImg}${qsep}w=480 480w,
  ${finalImg}${qsep}w=768 768w,
  ${finalImg}${qsep}w=1024 1024w
`;

const titleText = (listing as any).title || 'Untitled Property';
const altText =
  (listing as any).title && (listing as any).location
    ? `${(listing as any).title} - ${(listing as any).location}`
    : (listing as any).title || 'Property image';

const statusColors: Record<string, string> = {
  'sale': 'bg-blue-600',
  'rent': 'bg-emerald-600',
  'short-stay': 'bg-neutral-800'
};
const statusKey = availabilityToSegment((listing as any).availability);
const statusClass = statusColors[statusKey] || 'bg-neutral-800';

const priceText =
  typeof (listing as any).price === 'number'
    ? `KSh ${(listing as any).price.toLocaleString()}`
    : ((listing as any).price || 'Price N/A');

const imgAspect = compact ? 'aspect-[4/3]' : 'aspect-[16/9]';
const titleSize = compact ? 'text-base' : 'text-lg';
const pad = compact ? 'p-3' : 'p-4';
const btnPad = compact ? 'px-3 py-2' : 'px-4 py-2';
---

<article
  class="card group border border-neutral-200 overflow-hidden bg-white transition will-change-transform
         hover:shadow-md focus-within:ring-2 focus-within:ring-cta"
  role="article"
>
  <!-- Media -->
  <a href={finalHref} class="block overflow-hidden focus:outline-none" aria-label={`Open ${titleText} details`}>
    <figure class={`w-full ${imgAspect} relative`}>
      {(listing as any).availability && (
        <span
          class={`absolute top-2 left-2 ${statusClass} text-white text-[11px] font-medium px-2 py-1 rounded z-10`}
          aria-label={`Status: ${(listing as any).availability}`}
        >
          {(listing as any).availability}
        </span>
      )}
      <img
        src={finalImg}
        srcset={srcset}
        sizes={compact ? "(min-width:1024px) 25vw, (min-width:640px) 50vw, 100vw" : "(min-width:768px) 33vw, 100vw"}
        alt={altText}
        class="absolute inset-0 w-full h-full object-cover transition-transform duration-300 ease-out group-hover:scale-[1.02]"
        {...imgProps}
      />
    </figure>
  </a>

  <!-- Body -->
  <div class={`flex flex-col ${pad} gap-2`}>
    <h3 class={`${titleSize} font-semibold text-primary leading-snug`}>
      <a
        href={finalHref}
        class="rounded focus:outline-none focus:ring-2 focus:ring-cta hover:opacity-90"
      >
        {titleText}
      </a>
    </h3>

    <p class="text-sm text-neutral-600">{(listing as any).location || 'Unknown Location'}</p>

    <!-- PRICE ONLY -->
    <div class="flex items-baseline justify-end">
      <div class="text-sm md:text-base font-semibold text-neutral-900">{priceText}</div>
    </div>

    {(listing as any).bedrooms || (listing as any).bathrooms ? (
      <div class="mt-1 flex flex-wrap gap-2">
        {(listing as any).bedrooms && (
          <span class="pill pill-slate">
            <span class="pill-dot"></span>
            {(listing as any).bedrooms} {(listing as any).bedrooms === 1 ? 'Bedroom' : 'Bedrooms'}
          </span>
        )}
        {(listing as any).bathrooms && (
          <span class="pill pill-emerald">
            <span class="pill-dot"></span>
            {(listing as any).bathrooms} {(listing as any).bathrooms === 1 ? 'Bathroom' : 'Bathrooms'}
          </span>
        )}
      </div>
    ) : null}

    <!-- CTA pinned to bottom -->
    <div class="mt-3">
      <a
        href={finalHref}
        class={`${primaryCtaClass} ${btnPad} text-sm rounded-md w-full inline-flex items-center justify-center`}
        aria-label="View details"
      >
        View details
      </a>
    </div>
  </div>
</article>
