---
// src/components/FeaturedListingsRow.astro
import PropertyCard from './PropertyCard.astro';
import type { CollectionEntry } from 'astro:content';
import { resolveListingImage, buildListingHref } from '../lib/utils/paths';

const { items = [] }: { items: (CollectionEntry<'listings'> | CollectionEntry<'featured'>)[] } = Astro.props;
const featured = items.slice(0, 4);

const imgProps = {
  loading: 'lazy',
  decoding: 'async',
  width: 480,
  height: 320,
};
---

<section
  class="relative"
  role="region"
  aria-roledescription="carousel"
  aria-label="Featured listings"
  aria-live="polite"
>
  <!-- Desktop grid -->
  <div class="hidden lg:grid grid-cols-4 gap-6">
    {featured.map((item) => (
      <PropertyCard
        listing={{
          ...item.data,
          image: resolveListingImage(
            item.slug,
            item.data.imagesFolder,
            item.data.images,
            item.data.image
          )
        }}
        slug={item.slug}
        href={buildListingHref(item.data.availability, item.slug)}
        compact={true}
        primaryCtaClass="btn-cta"
        secondaryCtaClass="btn-outline"
        imgProps={imgProps}
      />
    ))}
  </div>

  <!-- Mobile/tablet horizontal scroll (native swipe) -->
  <div
    id="featured-scroll"
    class="flex lg:hidden gap-4 overflow-x-auto px-1 snap-x snap-mandatory"
  >
    {featured.map((item) => (
      <div class="shrink-0 basis-full sm:basis-1/2 md:basis-1/3 snap-start">
        <PropertyCard
          listing={{
            ...item.data,
            image: resolveListingImage(
              item.slug,
              item.data.imagesFolder,
              item.data.images,
              item.data.image
            )
          }}
          slug={item.slug}
          href={buildListingHref(item.data.availability, item.slug)}
          compact={true}
          primaryCtaClass="btn-cta"
          secondaryCtaClass="btn-outline"
          imgProps={imgProps}
        />
      </div>
    ))}
  </div>

  <!-- Mobile swipe hint -->
  <div
    id="swipe-hint"
    class="lg:hidden absolute inset-y-0 right-0 w-12 bg-gradient-to-l from-white to-transparent flex items-center justify-center text-neutral-400 pointer-events-none transition-opacity duration-500"
  >
    <span class="text-xs font-medium rotate-90">Swipe â€º</span>
  </div>
</section>

<script type="module" client:load>
  const el = document.getElementById('featured-scroll');
  const hint = document.getElementById('swipe-hint');

  if (el) {
    // Make the container feel instantly draggable on touch
    el.style.touchAction = 'pan-x pinch-zoom';
    el.style.webkitOverflowScrolling = 'touch';

    // Hide hint on first interaction
    const hideHint = () => hint?.classList.add('opacity-0');
    el.addEventListener('pointerdown', hideHint, { passive: true });
    el.addEventListener('scroll', hideHint, { passive: true });

    // Pointer-drag fallback (smooth, no delay)
    let isDown = false;
    let startX = 0;
    let startLeft = 0;
    let moved = false;

    const onDown = (e) => {
      isDown = true;
      moved = false;
      startX = e.clientX;
      startLeft = el.scrollLeft;
      el.setPointerCapture?.(e.pointerId);
      el.dataset.dragging = 'true';
    };

    const onMove = (e) => {
      if (!isDown) return;
      const dx = e.clientX - startX;
      if (Math.abs(dx) > 3) moved = true;
      // Prevent text selection / click delay while dragging
      e.preventDefault();
      el.scrollLeft = startLeft - dx;
    };

    const onUp = (e) => {
      isDown = false;
      el.releasePointerCapture?.(e.pointerId);
      delete el.dataset.dragging;
    };

    el.addEventListener('pointerdown', onDown, { passive: true });
    el.addEventListener('pointermove', onMove, { passive: false });
    window.addEventListener('pointerup', onUp, { passive: true });
    el.addEventListener('pointerleave', onUp, { passive: true });

    // Prevent accidental clicks on cards when user dragged
    el.addEventListener('click', (ev) => {
      if (moved) {
        ev.preventDefault();
        ev.stopPropagation();
      }
      moved = false;
    }, true);

    // Keyboard support (for accessibility)
    el.setAttribute('tabindex', '0');
    el.addEventListener('keydown', (e) => {
      const cardW = el.firstElementChild?.getBoundingClientRect().width || 0;
      if (e.key === 'ArrowRight') el.scrollBy({ left: cardW, behavior: 'smooth' });
      if (e.key === 'ArrowLeft')  el.scrollBy({ left: -cardW, behavior: 'smooth' });
      if (e.key === 'Home')       el.scrollTo({ left: 0, behavior: 'smooth' });
      if (e.key === 'End')        el.scrollTo({ left: el.scrollWidth, behavior: 'smooth' });
    });
  }
</script>

<style>
/* Hide scrollbar but keep native momentum scrolling */
#featured-scroll::-webkit-scrollbar { display: none; }
#featured-scroll { -ms-overflow-style: none; scrollbar-width: none; }

/* Make swipe snapping reliable */
#featured-scroll { 
  scroll-snap-type: x mandatory;
  overscroll-behavior-x: contain;
  contain: content;            /* paints faster on mobile */
}

/* Strong snap on each card */
#featured-scroll > * { scroll-snap-align: start; scroll-snap-stop: always; }

/* Visual feedback while dragging on desktop */
#featured-scroll[data-dragging="true"] { cursor: grabbing; }
</style>
