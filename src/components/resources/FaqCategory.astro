---
/** FAQ category: searchable accordion + link to matching guide */
const {
  title,
  guideUrl = '#',
  faqs = /** [{ q, aHtml }] */ [],
} = Astro.props;

/** Avoid ID collisions if multiple components render on one page */
const uid = Math.random().toString(36).slice(2, 8);
const qId = `faq-q-${uid}`;
const listId = `faq-list-${uid}`;
---

<section class="max-w-7xl mx-auto px-4 py-8 md:py-10" data-faq-root={uid}>
  <!-- Header -->
  <header class="mb-6 md:mb-8">
    <h1 class="text-2xl md:text-3xl font-bold text-primary">{title} FAQs</h1>
    <div class="mt-3 flex flex-col sm:flex-row items-stretch sm:items-center gap-3">
      <!-- Search -->
      <form role="search" aria-label={`Search ${title} FAQs`} class="w-full">
        <label for={qId} class="sr-only">Search this category</label>
        <input
          id={qId}
          type="search"
          placeholder="Search this category"
          class="w-full max-w-lg rounded-md border border-neutral-300 px-3 py-2 text-sm
                 focus:outline-none focus:ring-2 focus:ring-[color:var(--color-cta)]"
        />
      </form>

      <!-- Guide Link -->
      <a
        href={guideUrl}
        class="shrink-0 btn-outline rounded-md text-sm px-3 py-2
               focus:outline-none focus:ring-2 focus:ring-[color:var(--color-cta)]"
      >
        Read full guide
      </a>
    </div>
  </header>

  <!-- FAQ Accordion -->
  <div
    id={listId}
    class="divide-y divide-neutral-200 rounded-xl ring-1 ring-neutral-200 bg-white shadow-sm"
  >
    {faqs.map((f) => (
      <details class="group" data-title={f.q}>
        <summary
          class="list-none cursor-pointer px-4 py-3 flex items-center justify-between
                 hover:bg-neutral-50 focus:outline-none focus:ring-2 focus:ring-[color:var(--color-cta)]"
        >
          <span class="font-medium text-primary">{f.q}</span>
          <svg
            class="w-4 h-4 text-neutral-500 transition-transform group-open:rotate-180"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </summary>
        <div class="px-4 pb-4 text-neutral-700 prose max-w-none" set:html={f.aHtml}></div>
      </details>
    ))}
  </div>
</section>

<script type="module" client:load>
  const qId = /* astro-inject */ {JSON.stringify(qId)};
  const listId = /* astro-inject */ {JSON.stringify(listId)};

  const q = document.getElementById(qId);
  const list = document.getElementById(listId);

  if (q && list) {
    // Filter and close any hidden items
    q.addEventListener('input', () => {
      const term = q.value.trim().toLowerCase();
      list.querySelectorAll('[data-title]').forEach((d) => {
        const t = d.getAttribute('data-title')?.toLowerCase() || '';
        const hide = !!term && !t.includes(term);
        d.classList.toggle('hidden', hide);
        if (hide) d.removeAttribute('open');
      });
    });

    // Enforce single-open within this category list
    list.addEventListener(
      'toggle',
      (e) => {
        const el = e.target;
        if (!(el instanceof HTMLDetailsElement) || !el.open) return;
        list.querySelectorAll('details[open]').forEach((d) => {
          if (d !== el) d.removeAttribute('open');
        });
      },
      true // capture ensures we catch native toggle early
    );
  }
</script>
